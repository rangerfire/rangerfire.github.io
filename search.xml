<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[God Bless Programmer]]></title>
    <url>%2F2028%2F05%2F08%2FNeverBug%2F</url>
    <content type="text"><![CDATA[_oo0oo_ _oo0oo_ o8888888o o8888888o 88&quot; . &quot;88 88&quot; . &quot;88 (| -_- |) (| -_- |) 0\ = /0 0\ = /0 ___/`---&apos;\___ ___/`---&apos;\___ .&apos; \\| |// &apos;. .&apos; \\| |// &apos;. / \\||| : |||// \ / \\||| : |||// \ / _||||| -:- |||||- \ / _||||| -:- |||||- \ | | \\\ - /// | | | | \\\ - /// | | | \_| &apos;&apos;\---/&apos;&apos; |_/ | | \_| &apos;&apos;\---/&apos;&apos; |_/ | \ .-\__ &apos;-&apos; ___/-. / \ .-\__ &apos;-&apos; ___/-. / ___&apos;. .&apos; /--.--\ `. .&apos;___ ___&apos;. .&apos; /--.--\ `. .&apos;___ .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos; &quot;&quot;. .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos; &quot;&quot;. | | : `- \`.;`\ _ /`;.`/ - ` : | | | | : `- \`.;`\ _ /`;.`/ - ` : | | \ \ `_. \_ __\ /__ _/ .-` / / \ \ `_. \_ __\ /__ _/ .-` / / =====`-.____`.___ \_____/___.-`___.-&apos;===== =====`-.____`.___ \_____/___.-`___.-&apos;===== `=---=&apos; `=---=&apos; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 写字楼里写字间，写字间里程序员； 程序人员写程序，又拿程序换酒钱。 酒醒只在网上坐，酒醉还来网下眠； 酒醉酒醒日复日，网上网下年复年。 但愿老死电脑间，不愿鞠躬老板前； 奔驰宝马贵者趣，公交自行程序员。 别人笑我忒疯癫，我笑自己命太贱； 不见满街漂亮妹，哪个归得程序员？]]></content>
  </entry>
  <entry>
    <title><![CDATA[基础知识]]></title>
    <url>%2F2020%2F07%2F03%2FFundament%2F</url>
    <content type="text"><![CDATA[WEB Header中的内容一般是给浏览器看的，body的内容才是真正给user看的 爬虫的作用是根据tag来找到不同的内容 用js-xlsx包读取本地excel文件时，通过XLSX.read方法会获得一个workbook对象，然后通过 var jsondata = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]); 可以获得该表内容的”json对象”。json有两种数据结构：对象、数组。JSON 语法是 JavaScript 语法的子集,所以操作同JS一样。 //单一对象简单形式： var o={“name”:”bty”,”age”:11,”time”:”2009-08-20”}； //单一对象复杂形式： var o2 = { &quot;list&quot;:[ {&quot;password&quot;:&quot;666&quot;,&quot;name&quot;:&quot;bty&quot;}, {&quot;password&quot;:&quot;422&quot;,&quot;name&quot;:&quot;zsn&quot;}], &quot;array&quot;:[ {&quot;password&quot;:&quot;123&quot;,&quot;name&quot;:&quot;bty&quot;}, {&quot;password&quot;:&quot;452&quot;,&quot;name&quot;:&quot;zsn&quot;}] }; //数组简单形式： var jsonArr2 = [“Google”, “Runoob”, “Taobao”] //复杂形式： var jsonArr2 = [ {&quot;name&quot;:&quot;bty&quot;,&quot;age&quot;:11,&quot;time&quot;:&quot;2009-08-20&quot;}, {&quot;name&quot;:&quot;zsn&quot;,&quot;age&quot;:10,&quot;time&quot;:&quot;2008-08-20&quot;} ]; 处理这些对象的方法并不复杂，例如修改第一个name的值： o2.list[0].name = &quot;sam&quot;; //修改对象属性的值 jsonArr2[0].name = &quot;sam&quot;; //修改数组元素的值 algorithm Morris方法 这个方法是用来做树的中序遍历的（inorder traverse）,将之前的二叉树变成一个只有右孩子的树，且顺序时inorder的。 已知中序遍历是 左-根-右 的顺序，所以我们的目的是：将“根-右子树”放到左子树的最右边的节点上，直到所有节点都不含有左孩子，从而达到我们的目的。 所以该方法的流程是： 1. 以根节点root为起点，记为当前节点cur;2. 如果cur不存在左孩子，很好，向下走，将cur节点指向它的右孩子，即cur = cur.right; 否则，找到左子树中最右边的节点（rightmost node），将该节点的右孩子指向当前节点cur，即 rightmost.right = cur，然后当前节点指向它的左孩子，即cur = cur.left; 3. 重复步骤2，直到cur节点为空 经过这样的步骤之后，我们就得到了一个按inorder排列的树，如果需要记录这个遍历，只需要在步骤2的第一个判断条件成立时记录当前节点的值即可。 代码(inorder遍历根节点为root的二叉树，并返回)： ‘’’)List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); TreeNode cur = root; while(cur != null) { if(cur.left == null) { res.add(cur.val); cur = cur.right; } else { TreeNode pre = cur.left; while(pre.right != null) { pre = pre.right; } pre.right = cur; TreeNode temp = cur; cur = cur.left; temp.left = null; } } return res; ‘’’)]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>PYTHON</tag>
        <tag>INTERVIEW</tag>
        <tag>FUNDAMENT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记]]></title>
    <url>%2F2020%2F03%2F29%2FBooks%2F</url>
    <content type="text"><![CDATA[金字塔原理（The Pyramid Principle） 基本结构：结论先行，以上统下，归类分组，逻辑递进 先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据（类似议论文的结构） 听众最常出现的4个问题：是什么，为什么，怎么做，好不好 条理不清的原因：表达思想的顺序和读者的理解力之间的矛盾 “自上而下的表达，自下而上的思考” 自下而上的思考：就是一个不断归类，概括的过程，句子-&gt;段落-&gt;章节-&gt;文章 所有思想必须符合三个规则： 纵向：文章中任一层次的思想必须是下层思想的概括 横向：每组中的思想必须在同一逻辑范畴（检测方法是：能否用单一名字概括这组思想，比如“方法”，“问题”，“建议”） 横向：每组中的思想必须按照逻辑顺序组织 四种组织思想的逻辑顺序： 演绎顺序：大前提，小前提，结论 时间（步骤）顺序：第一，第二，第三 结构（空间）顺序：波士顿，纽约，华盛顿 程度（重要性）顺序：最重要，次要，最不重要 洞穴奇案 有5名探险家被困在一个洞穴里，并得知短时间内无法获救，水尽粮绝，饥寒交迫，于是他们提出，投骰子选出一个牺牲者，让其他四人吃掉这个人的血肉。在最后投掷前，A决定放弃这个方案，可是剩下四个人依然投了骰子，并且恰好选中了A作为牺牲者，而A是这个方案的最初发起人。剩下的四个人在吃掉A之后最终等来了救援，但是他们却被冠以杀人罪，执行了绞刑。那么这四个人到底有没有罪？ 注：概率没有问题，有人替A扔了骰子，并且A也没有提出异议 最初的观点：如果最终的判决是绞刑这4个人，那么这个方案无论如何都是毫无意义的，它将导致所有五个人的死亡。所以，假如这5名探险者当初只有这一个选项，那么遍不应该判处这4名获救者绞刑，因为这样判处的话就相当于毫无理由直接判处了这5个人绞刑。假如这5名探险者还有别的选择，那么A作为这个方案的最初提起者，相当于提出了一个5人全部牺牲的方案，那么A应该对这个决定付出最大的责任，而不是其他4个人。 1 法律规定：“任何人故意剥夺了他人的生命，都必须被判处死刑” 乔布斯传 硅谷最初在60年代末开始飞速发展，原因是军事承包，大量的资金涌入，半导体材料的大规模使用（军事需要），所以叫硅谷]]></content>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo之路]]></title>
    <url>%2F2018%2F05%2F16%2FHow-to-get-this_3%2F</url>
    <content type="text"><![CDATA[优化next主题的一些操作1. 选择一个主题 theme的选择有很多，这里推荐一个主题网站 这里我选择的是使用人数最多的NEXT主题，参考的文档较多，便于入手 导入hexo主题方法： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 导入成功后，themes文件下会出现一个名为next文件夹，此时只是将next的主题包下载了下来，需要在站点配置文件中设置主题，也就是在站点配置文件中找到theme字段，将它的值改为你的主题名，这里我改为next 1theme: next 2. 两个主要配置文件 在根目录下的_config.yml文件，叫做站点配置文件 在主题目录下也会有一个_config.yml文件，叫做主题配置文件 3. 看下效果 更换主题后，一般要做如下三个操作 123hexo cleanhexo ghexo s 然后打开localhost:4000看看效果，是不是已经变成你的主题了~ 当然，主题中的很多插件都是默认关闭的，需要在之后的配置中根据自己的喜好设置，所以一开始看到的界面会很简单~ 4. 个性化域名 除了在本地演示，博客还可以通过你当时创建的仓库名来访问（你的用户名.github.io），不过每次完成更新后需要 1hexo d 来发布你的更新到服务器上，如果还是没有效果，可以这样： 123hexo cleanhexo ghexo d 来一遍完整的~ 如果觉得github的域名不好记，可以在一些域名网站购买一个喜欢的域名（.com域名最好），我买的域名是mambawang.com 买完域名后，需要与我们的博客网站绑定，先进入博客根目录的source文件中，创建一个名为CNAME的无后缀的文件，内容为你购买的域名 1mambawang.com 这里不需要加www，这样以后加不加www都可以访问你的网站 创建完CNAME文件之后，还要去你购买域名的网站的DNS的管理界面添加以下三条记录，过一会就可以直接输入你的域名访问博客了！ 不过，不知道是什么原因，使用godaddy自带的DNS时老是出问题，后来我把DNS转到DNSPOD上，就再也没出过问题了 记录类型 主机记录 记录值 解析线路 CNAME www 用户名.github.io default A @ 192.30.252.153 default A @ 192.30.252.154 default 5. 未完待续 听点儿歌吧~ 1.头像2.背景透明3.音乐4.网站图标5.超链接语法6.腾讯公益4047.菜单栏添加8.点击爆炸9.背景动画10.]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo之路]]></title>
    <url>%2F2018%2F05%2F16%2FHow-to-get-this_2%2F</url>
    <content type="text"><![CDATA[完成基本配置后，怎么让我们的博客更好看？1. 选择一个主题 theme的选择有很多，这里推荐一个主题网站 这里我选择的是使用人数最多的NEXT主题，参考的文档较多，便于入手 导入hexo主题方法： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 导入成功后，themes文件下会出现一个名为next文件夹，此时只是将next的主题包下载了下来，需要在站点配置文件中设置主题，也就是在站点配置文件中找到theme字段，将它的值改为你的主题名，这里我改为next 1theme: next 2. 两个主要配置文件 在根目录下的_config.yml文件，叫做站点配置文件 在主题目录下也会有一个_config.yml文件，叫做主题配置文件 3. 看下效果 更换主题后，一般要做如下三个操作 123hexo cleanhexo ghexo s 然后打开localhost:4000看看效果，是不是已经变成你的主题了~ 当然，主题中的很多插件都是默认关闭的，需要在之后的配置中根据自己的喜好设置，所以一开始看到的界面会很简单~ 4. 个性化域名 除了在本地演示，博客还可以通过你当时创建的仓库名来访问（你的用户名.github.io），不过每次完成更新后需要 1hexo d 来发布你的更新到服务器上，如果还是没有效果，可以这样： 123hexo cleanhexo ghexo d 来一遍完整的~ 如果觉得github的域名不好记，可以在一些域名网站购买一个喜欢的域名（.com域名最好），我买的域名是mambawang.com 买完域名后，需要与我们的博客网站绑定，先进入博客根目录的source文件中，创建一个名为CNAME的无后缀的文件，内容为你购买的域名 1mambawang.com 这里不需要加www，这样以后加不加www都可以访问你的网站 创建完CNAME文件之后，还要去你购买域名的网站的DNS的管理界面添加以下三条记录，过一会就可以直接输入你的域名访问博客了！ 不过，不知道是什么原因，使用godaddy自带的DNS时老是出问题，后来我把DNS转到DNSPOD上，就再也没出过问题了 记录类型 主机记录 记录值 解析线路 CNAME www 用户名.github.io default A @ 192.30.252.153 default A @ 192.30.252.154 default 5. 未完待续 听点儿歌吧~]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo之路]]></title>
    <url>%2F2018%2F05%2F08%2FHow-to-get-this_1%2F</url>
    <content type="text"><![CDATA[1. 基本环境 &amp; 配置（具体如何配置环境请自行google） 检查Node.js &amp; npm 环境 检查Git环境 2. 在Github上创建代码库（用于上传blog代码） 在github中创建一个新的repository，这个仓库的名字要用yourname.github.io这个形式 例如: 你的github用户名叫ABC，那么仓库名必须为ABC.github.io，其他参数都默认即可 3. 配置Hexo 在你的PC上创建一个新文件夹，今后的所有操作都只在这个文件夹中进行（网站的所有文件都在这个文件夹中） 打开这个空文件夹，空白处 shift + 鼠标右键，输入 1hexo init 进行初始化工作，要注意的是初始化只有在空文件夹下才起作用 继续输入 1npm install hexo-cli -g 会出现一些warn，不用管它们 继续输入 1npm install hexo --save 到这里hexo的环境应该已经配置好了，输入 1hexo -v 来检查hexo环境，如果出现一堆版本信息，则说明配置成功 4. 初始化Hexo 接着上面输入 1hexo init 不过，如果这时你的文件夹不是空的就不用输入这一行了 继续输入 1npm install 完成初始化 5. 初步体验Hexo 继续输入 1hexo -g 最后输入 1hexo -s 浏览器中输入localhost:4000，可以看到一个初步的Hexo页面，格式都是Hexo为我们自动生成的，可以修改 6. 未完待续 听点儿歌吧~]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown文章示例]]></title>
    <url>%2F2018%2F05%2F07%2FUntitled%20Document%2F</url>
    <content type="text"><![CDATA[Dillinger Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor. Type some Markdown on the left See HTML in the right Magic New Features! Import a HTML file and watch it magically convert to Markdown Drag and drop images (requires your Dropbox account be linked) You can also: Import and save files from GitHub, Dropbox, Google Drive and One Drive Drag and drop markdown and HTML files into Dillinger Export documents as Markdown, HTML and PDF Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site The overriding design goal for Markdown’sformatting syntax is to make it as readableas possible. The idea is that aMarkdown-formatted document should bepublishable as-is, as plain text, withoutlooking like it’s been marked up with tagsor formatting instructions. This text you see here is actually written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right. TechDillinger uses a number of open source projects to work properly: AngularJS - HTML enhanced for web apps! Ace Editor - awesome web-based text editor markdown-it - Markdown parser done right. Fast and easy to extend. Twitter Bootstrap - great UI boilerplate for modern web apps node.js - evented I/O for the backend Express - fast node.js network app framework @tjholowaychuk Gulp - the streaming build system Breakdance - HTML to Markdown converter jQuery - duh And of course Dillinger itself is open source with a public repository on GitHub. InstallationDillinger requires Node.js v4+ to run. Install the dependencies and devDependencies and start the server. 123$ cd dillinger$ npm install -d$ node app For production environments… 12$ npm install --production$ NODE_ENV=production node app PluginsDillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below. Plugin README Dropbox plugins/dropbox/README.md Github plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md DevelopmentWant to contribute? Great! Dillinger uses Gulp + Webpack for fast developing.Make a change in your file and instantanously see your updates! Open your favorite Terminal and run these commands. First Tab:1$ node app Second Tab:1$ gulp watch (optional) Third:1$ karma test Building for sourceFor production release:1$ gulp build --prod Generating pre-built zip archives for distribution:1$ gulp build dist --prod DockerDillinger is very easy to install and deploy in a Docker container. By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image. 12cd dillingerdocker build -t joemccann/dillinger:$&#123;package.json.version&#125; This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger. Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile): 1docker run -d -p 8000:8080 --restart="always" &lt;youruser&gt;/dillinger:$&#123;package.json.version&#125; Verify the deployment by navigating to your server address in your preferred browser. 1127.0.0.1:8000 Kubernetes + Google CloudSee KUBERNETES.md Todos Write MORE Tests Add Night Mode LicenseMIT Free Software, Hell Yeah!]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Daily]]></title>
    <url>%2F2018%2F04%2F03%2FDaily%2F</url>
    <content type="text"><![CDATA[水深火热： 前一天中午虐猫的那个人不关煤气，关键是他人还在客厅，都闻不到，后一天另一个室友不关火，我都是在自己屋里忍无可忍才出来检查一下，我能活到现在真是个奇迹。 从来不关门，开完冰箱不关冰箱门，下楼不关房门，我半夜起来关门不下20次了已经，最近还说因为疫情这边会有抢劫的情况，也不知你说这个话的时候知不知道自己到底在说什么 一个idea 相处一个idea，符合自己的兴趣，有意义，有趣，选好一个目标：篮球，留学生，疫情idea1 疫情期间航线查询 2020-05-10 读乔布斯传 突然发现应该少看知乎，至少在自己能够独立思考之前，不然总是会在遇到问题时第一时间去知乎，而放弃了自己的思考 看到有人把乔布斯的病和他的素食主义关联到一起，想到了之前上过的一门课，因果推论，虽然很多时候因和果存在一定的时间关系，但并不一定A发生在B之前，A就是B的原因 有可能C也发生在B之前，C才是B的真正原因，而A和B实际上没什么关系对于因果是否存在时间关系，举个例子，总的来看，高学历可以获得更高的工资，但同时，也意味着要获得高工资，你需要更高的学历，从而形成了一种双向的因果。 聪明，智慧，迷茫，孤僻，固执，嬉皮士，素食，辍学，印度，禅宗，修行， 可以编写一个手册，记录我目前的状态到最终找到工作的一个过程。idea的来源是github上的一个外国小哥自学8个月进amazon的经历 可以把知识点变成知识卡，做成答题游戏（记忆卡，flash card） 一万小时定律：人们眼中的天才并非是人们所见的那样，天资超凡，一个人在任何一个领域从平凡变成非凡都要经历10000小时的持续努力（一万小时是从平凡到非凡的必须的锤炼）。要成为某个领域的专家，需要10000小时，按比例计算就是如果每天8小时的学习，一周工作5天，则需要至少5年。]]></content>
      <tags>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Log]]></title>
    <url>%2F2018%2F03%2F27%2FLog%2F</url>
    <content type="text"><![CDATA[不能上传文章问题，解决办法：更新git版本，更改配置文件deploy中的repo地址 还有小问题是每次上传都要输密码，解决办法： 加入左下角的动画人物步骤：获取live2d npm install –save hexo-helper-live2d ; 导入所需图形 npm install live2d-widget-model-shizuku ; 在站点配置文件下添加： live2d的代码 更改鼠标样式尝试了一上午， 失败 想写一个网页计数器，记录学习时间，看到一个不错的，搞了半天最后发现它其实用的是一个动画效果来展示时间，放弃 setTimeout是JavaScript中的函数，用于延时执行某个函数，参数第一个为函数名或代码段，第二个为延时（ms） hexo本来就是静态的博客，所以把所有数据都存在本地即可，没必要浪费时间在这上]]></content>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
</search>
